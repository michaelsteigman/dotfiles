# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Zsh configuration file

# Path
#
export PATH="$HOME/.local/bin:$HOME/.lmstudio/bin:$BP/opt/node@20/bin:$BP/opt/postgresql@14/bin:$PATH"

# 1password agent for SSH
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock

# set brew prefix for use throughout
BP="$(brew --prefix)"

# zsh plugins and themes
source "$BP/share/powerlevel10k/powerlevel10k.zsh-theme"
source "$BP/share/zsh-autocomplete/zsh-autocomplete.plugin.zsh"
source "$BP/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

FPATH=$BP/share/zsh-completions:$FPATH

autoload -Uz compinit
compinit

if which pyenv > /dev/null; then
    eval "$(pyenv init --path)";
    if which pyenv-virtualenv-init > /dev/null; then
        eval "$(pyenv virtualenv-init -)";
    fi
fi

# aliases
# LCS
alias hub='ssh ms526@phslxhub2.partners.org'
alias stage-hub='ssh ms526@phslxlcs15.partners.org'
alias dev-hub='ssh ms526@phslxlcs17.partners.org'

# CPP
alias elyn='ssh ms526@elyn.mgb.org'
alias elyn-eth='ssh ms526@172.18.243.154'
alias e1='ssh -oHostKeyAlgorithms=+ssh-rsa ms526@erisone.partners.org'
alias e2='ssh ms526@eristwo.partners.org'
alias exdl='ssh ms526@erisxdl.partners.org'
alias awing='ssh ms526@awing.partners.org'
alias snowsql=/Applications/SnowSQL.app/Contents/MacOS/snowsql

export EDITOR="code --wait"
export VISUAL="code --wait"

# Python
#
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
export WORKON_HOME=$HOME/.pyenv/versions/
export PROJECT_HOME=$HOME/dev

# LCS Dev
source ~/Documents/Workspace/learn/local/env.sh
source ~/Documents/Workspace/learn-ops/local/functions.sh
source ~/Documents/Workspace/bitpress-ops/local/functions.sh

clone_my_repos() {
    if [ -f ~/Documents/Workspace/.repos ]; then
        echo -n "This script will clone the following repos into ~/Documents/Workspace. \n`cat ~/Documents/Workspace/.repos` \nContinue? (y/n) "
        read REPLY
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            echo "Canceled."
            return 1
        fi
        pushd
        cd ~/Documents/Workspace/
        while IFS= read -r REPO; do
            # syntax below splits the string, which in
            # some cases contains a name for the directory
            local repo_parts=(${=REPO})
            local repo_url=${repo_parts[1]}
            local target_dir=${repo_parts[2]:-$(basename ${repo_url} .git)}

            if [[ -d "$target_dir" ]]; then
                echo "Directory '$target_dir' already exists, skipping..."
            else
                echo "Cloning $repo_url into $target_dir"
                git clone ${=REPO}
            fi
        done < ~/Documents/Workspace/.repos
        popd
    else
        echo "No .repos file found in ~/Documents/Workspace."
    fi
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
